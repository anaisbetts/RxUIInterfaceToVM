using System;
using ReactiveUI;
using ReactiveUI.Xaml;
using ReactiveUI.Routing;

namespace TODOFillMeIn.ViewModels
{
    {{#interfaces}}
    {{definition}}
    {{/interfaces}}

    {{#interfaces}}
    public void {{implClassName}} : ReactiveObject, {{interfaceName}}
    {
        {{#properties}}
        {{#outputProp}}
        ObservableAsPropertyHelper<{{type}}> _{{name}};
        public {{type}} {{name}} 
        {
            get { return _{{name}}; }
        }
        {{/outputProp}}
        {{#readWriteProp}}
        {{type}} _{{name}};
        public {{type}} {{name}} 
        {
            get { return _{{name}}; }
            set { this.RaiseAndSetIfChanged(x => x.{{name}}, value); }
        }
        {{/readWriteProp}}
        {{#onceProp}}
        {{type}} {{name}} { get; protected set; }
        {{/onceProp}}
        {{#anythingElse}}
        {{name}}
        {{/anythingElse}}
        {{/properties}}

        {{#isRoutableViewModel}}
        public IScreen HostScreen { get; protected set; }

        public string UrlPathSegment { 
            get { return "TODO: Implement Me"; }
        }

        public {{implClassName}}(IScreen hostScreen)
        {
            HostScreen = hostScreen;
            {{#onceProperties}}
            {{name}} = null;    // TODO: Set me
            {{/onceProperties}}

            // TODO: Wire up your properties here!
        }
        {{/isRoutableViewModel}}
        {{^isRoutableViewModel}}
        public {{implClassName}}()
        {
            {{#onceProperties}}
            {{name}} = null;    // TODO: Set me
            {{/onceProperties}}
            // TODO: Wire up your properties here!
        }
        {{/isRoutableViewModel}}
    }
    {{/interfaces}}
}
